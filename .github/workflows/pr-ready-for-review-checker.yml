name: Move PR to ready for review if checks pass

permissions:
  # This is needed to move the PR to ready for review
  contents: write
  pull-requests: write
  checks: read
  statuses: read

on:
  workflow_run:
    # This is the list of workflows that we want to monitor
    workflows: ["Lint check", "Format check"]
    types: [completed]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  move-pr-to-ready-for-review:
    runs-on: ubuntu-latest
    # Run workflow only when action is triggered by a pull request
    if: ${{ github.event.workflow_run.event == 'pull_request' }}
    steps:
      # Checkout repository, Github CLI fail without this
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Move PR to ready for review if checks pass
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🚀 Starting PR checks monitor...');
            
            const prNumber = context.payload.workflow_run.pull_requests[0]?.number;
            if (!prNumber) {
              console.log('❌ No PR number found in payload, skipping...');
              return;
            }
            
            console.log(`📋 Processing PR #${prNumber}`);
            
            try {
              // Check if PR has WIP label or title contains WIP
              console.log('🔍 Checking for WIP status...');
              const prInfoOutput = await exec.getExecOutput(`gh pr view ${prNumber} --json isDraft,state,title,labels`);
              const prInfo = JSON.parse(prInfoOutput.stdout);
              
              // Check for WIP in title
              if (prInfo.title && prInfo.title.toUpperCase().includes('WIP')) {
                console.log('🚧 PR title contains WIP, skipping...');
                return;
              }
              
              // Check for WIP label
              if (prInfo.labels && prInfo.labels.some(label => label.name.toUpperCase() === 'WIP')) {
                console.log('🏷️ PR has WIP label, skipping...');
                return;
              }
              
              // Check if PR is in draft state
              console.log('🔍 Checking PR draft status...');
              
              if (!prInfo.isDraft) {
                console.log('ℹ️ PR is not in draft state, skipping...');
                return;
              }
              
              if (prInfo.state !== 'OPEN') {
                console.log(`ℹ️ PR state is ${prInfo.state}, skipping...`);
                return;
              }
              
              // Get all checks for the PR
              console.log('🔍 Fetching PR checks...');
              const checksOutput = await exec.getExecOutput(`gh pr checks ${prNumber} --json bucket,workflow`);
              const checks = JSON.parse(checksOutput.stdout);
              
              // bucket field, which categorizes the state field into pass, fail, pending, skipping, or cancel.
              checks.forEach(check => {
                let emoji = '';
                if (check.bucket === 'pass') emoji = '✅';
                else if (check.bucket === 'fail') emoji = '❌';
                else if (check.bucket === 'pending') emoji = '⏳';
                else if (check.bucket === 'skipping') emoji = '⏭️';
                else if (check.bucket === 'cancel') emoji = '🚫';
                else emoji = '❓';
                
                console.log(` -  ${check.workflow}: ${check.bucket} - ${emoji}`);
              });
              
              const hasNotPassedChecks = checks.some(check => check.bucket !== 'pass');
              
              if (hasNotPassedChecks) {
                console.log('❌ Some checks failed, in progress or cancelled, skipping PR ready action');
                return;
              }
              
              console.log('✅ All checks passed! Moving PR to ready for review...');
              
              // Move PR to ready for review
              await exec.getExecOutput(`gh pr ready ${prNumber}`);
              console.log('🎉 PR successfully moved to ready for review!');
              
              // Post a comment on the PR
              const commentMessage = '🎉✅  All checks are now passing! This PR has been automatically moved from draft to **Ready For Review**.  🚀';
              await exec.getExecOutput(`gh pr comment ${prNumber} --body "${commentMessage}"`);
            } catch (error) {
              console.error('❌ Error occurred:', error.message);
              throw error;
            }
